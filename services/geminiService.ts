import { GoogleGenAI, Modality } from "@google/genai";
import { PHOTOREALISTIC_PROMPT, TECHNICAL_SKETCH_PROMPT, FOOTWEAR_SKETCH_PROMPT, StyleOption, AspectRatioOption, GARMENT_CATEGORIES } from '../constants';

const API_KEY = process.env.API_KEY;

if (!API_KEY) {
  throw new Error("API_KEY environment variable not set");
}

const ai = new GoogleGenAI({ apiKey: API_KEY });

// Helper to convert data URL to base64 string
function dataUrlToBase64(dataUrl: string): string {
  const regex = /^data:image\/(png|jpeg|gif|webp);base64,/;
  return dataUrl.replace(regex, '');
}

export async function generateMockup(
  garment: string,
  style: StyleOption,
  aspectRatio: AspectRatioOption,
  designStyle: string,
  color: string,
  material: string
): Promise<string> {
  const footwearCategory = GARMENT_CATEGORIES.find(cat => cat.name === 'FOOTWEAR');
  const isFootwear = footwearCategory?.items.includes(garment) ?? false;

  let basePrompt: string;

  if (isFootwear) {
    basePrompt = FOOTWEAR_SKETCH_PROMPT;
  } else if (style === 'Technical Sketch Style') {
    basePrompt = TECHNICAL_SKETCH_PROMPT;
  } else {
    basePrompt = PHOTOREALISTIC_PROMPT;
  }
  
  const fullPrompt = basePrompt
    .replace('{{garment}}', garment)
    .replace('{{color}}', color)
    .replace('{{material}}', material)
    .replace('{{designStyle}}', designStyle);

  try {
    const response = await ai.models.generateImages({
      model: 'imagen-4.0-generate-001',
      prompt: fullPrompt,
      config: {
        numberOfImages: 1,
        outputMimeType: 'image/png',
        aspectRatio: aspectRatio,
      },
    });

    if (response.generatedImages && response.generatedImages.length > 0 && response.generatedImages[0].image.imageBytes) {
      const base64ImageBytes = response.generatedImages[0].image.imageBytes;
      return `data:image/png;base64,${base64ImageBytes}`;
    } else {
      throw new Error("No image was generated by the API.");
    }
  } catch (error) {
    console.error("Error calling Gemini API for mockup generation:", error);
    throw new Error("Failed to generate mockup. The AI may be experiencing issues. Please try again later.");
  }
}

export async function generateGraphic(prompt: string, garment: string, targetArea: string): Promise<string> {
  const fullPrompt = `Create a high-resolution, professional graphic of "${prompt}". 
  The graphic MUST have a transparent background. 
  It should be in a vector or clean logo style, suitable for placing on a ${garment}.
  The shape and aspect ratio should be optimized to fit well on the ${targetArea} of the garment.
  Do not include the garment itself, only the graphic.`;

  try {
    const response = await ai.models.generateImages({
      model: 'imagen-4.0-generate-001',
      prompt: fullPrompt,
      config: {
        numberOfImages: 1,
        outputMimeType: 'image/png',
        aspectRatio: '1:1', // Start with square, but prompt guides shape
      },
    });

    if (response.generatedImages && response.generatedImages.length > 0 && response.generatedImages[0].image.imageBytes) {
      const base64ImageBytes = response.generatedImages[0].image.imageBytes;
      return `data:image/png;base64,${base64ImageBytes}`;
    } else {
      throw new Error("No graphic was generated by the API.");
    }
  } catch (error) {
    console.error("Error calling Gemini API for graphic generation:", error);
    throw new Error("Failed to generate graphic. Please check the console for more details.");
  }
}

export async function editImage(baseImage: string, prompt: string): Promise<string> {
   try {
    const imagePart = {
      inlineData: {
        mimeType: 'image/png',
        data: dataUrlToBase64(baseImage),
      },
    };
    const textPart = { text: prompt };

    const response = await ai.models.generateContent({
      model: 'gemini-2.5-flash-image',
      contents: { parts: [imagePart, textPart] },
      config: {
        responseModalities: [Modality.IMAGE],
      },
    });

    const part = response.candidates?.[0]?.content?.parts?.[0];
    if (part?.inlineData) {
      const base64ImageBytes: string = part.inlineData.data;
      return `data:image/png;base64,${base64ImageBytes}`;
    } else {
      throw new Error("No edited image was returned from the API.");
    }
   } catch (error) {
    console.error("Error calling Gemini API for image editing:", error);
    throw new Error("Failed to edit image. Please check the console for more details.");
   }
}


// --- NEW ADVANCED AI FUNCTIONS ---

export async function checkContrast(baseImage: string, graphic: string, garmentColor: string): Promise<string> {
  const prompt = `Analyze the contrast between the provided graphic and the base apparel mockup. The apparel's primary color is ${garmentColor}. Is the graphic clearly visible and legible, or does it blend in? Provide a concise, one-sentence analysis with a recommendation if the contrast is poor.`;
  
  const imagePart = { inlineData: { mimeType: 'image/png', data: dataUrlToBase64(baseImage) } };
  const graphicPart = { inlineData: { mimeType: 'image/png', data: dataUrlToBase64(graphic) } };
  const textPart = { text: prompt };
  
  const response = await ai.models.generateContent({
    model: 'gemini-2.5-flash',
    contents: { parts: [imagePart, graphicPart, textPart] },
  });
  
  return response.text;
}

export async function generateGraphicVariation(originalPrompt: string, garment: string, targetArea: string): Promise<string> {
  const variationPrompt = `Generate a creative variation of the following graphic concept: "${originalPrompt}". Offer a different composition, style, or take on the subject matter, but keep the core idea. The graphic MUST have a transparent background, be suitable for a ${garment}, and be optimized for the ${targetArea}.`;
  
  // This re-uses the generateGraphic logic but with a more creative prompt
  return generateGraphic(variationPrompt, garment, targetArea);
}


export async function reversePromptFromImage(imageDataUrl: string): Promise<string> {
  const prompt = "Analyze this image and describe it as a detailed, concise text prompt that could be used to generate a similar vector graphic. Focus on the subject, style, and key elements.";
  
  const imagePart = { inlineData: { mimeType: 'image/png', data: dataUrlToBase64(imageDataUrl) } };
  const textPart = { text: prompt };

  const response = await ai.models.generateContent({
    model: 'gemini-2.5-flash',
    contents: { parts: [imagePart, textPart] },
  });

  return response.text.replace(/(\r\n|\n|\r)/gm, " ").replace(/"/g, ""); // Clean up response
}

export async function runPrintSafetyCheck(graphic: string): Promise<string> {
  const prompt = `Analyze this graphic for print readiness on apparel. Are there any elements, such as lines or details, that are too thin or small to be printed clearly using standard screen printing methods? Provide a one-sentence summary of your findings. If issues are found, be specific (e.g., "The whiskers on the cat are too thin for printing.").`;
  
  const imagePart = { inlineData: { mimeType: 'image/png', data: dataUrlToBase64(graphic) } };
  const textPart = { text: prompt };

  const response = await ai.models.generateContent({
    model: 'gemini-2.5-flash',
    contents: { parts: [imagePart, textPart] },
  });

  return response.text;
}