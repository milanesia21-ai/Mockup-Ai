
import { GoogleGenAI, Modality, Type } from "@google/genai";
import { 
    GARMENT_CATEGORIES, 
    StyleOption, 
    PHOTOREALISTIC_APPAREL_PROMPT,
    PHOTOREALISTIC_SCENE_PROMPT,
    TECHNICAL_SKETCH_PROMPT,
    EASY_PROMPT_PARSER,
    ADDITIONAL_VIEW_PHOTO_PROMPT,
    ADDITIONAL_VIEW_SKETCH_PROMPT,
    MockupConfig
} from '../constants';

const API_KEY = process.env.API_KEY;

if (!API_KEY) {
  throw new Error("API_KEY environment variable not set");
}

const ai = new GoogleGenAI({ apiKey: API_KEY });

// Helper to convert data URL to base64 string
function dataUrlToBase64(dataUrl: string): string {
  const regex = /^data:image\/(png|jpeg|gif|webp);base64,/;
  return dataUrl.replace(regex, '');
}

function cleanAndParseJson(jsonString: string): any {
  // AI can sometimes wrap the JSON in markdown-style code blocks or add conversation.
  // This extracts the JSON object from the string.
  const match = jsonString.match(/\{[\s\S]*\}/);
  if (match && match[0]) {
    try {
      return JSON.parse(match[0]);
    } catch (error) {
      console.error("Failed to parse extracted JSON string:", match[0], error);
      // Fall through to the generic error
    }
  }
  
  console.error("Could not find or parse JSON object in string:", jsonString);
  // Re-throw a more specific error to be caught by the UI handler.
  throw new Error("The AI returned an invalid data format. Please try again.");
}

export async function parseEasyPrompt(prompt: string): Promise<Partial<MockupConfig>> {
  try {
    const response = await ai.models.generateContent({
      model: "gemini-2.5-flash",
      contents: EASY_PROMPT_PARSER.replace('{{prompt}}', prompt),
      config: {
        responseMimeType: "application/json",
        responseSchema: {
          type: Type.OBJECT,
          properties: {
            selectedGarment: { type: Type.STRING },
            selectedDesignStyle: { type: Type.STRING },
            selectedColor: { type: Type.STRING },
            selectedMaterial: { type: Type.STRING },
            selectedStyle: { type: Type.STRING },
          }
        },
      },
    });

    const jsonString = response.text.trim();
    return cleanAndParseJson(jsonString) as Partial<MockupConfig>;
  } catch (error) {
    if (error instanceof Error && error.message.includes("invalid data format")) {
        throw error;
    }
    console.error("Error parsing easy prompt:", error);
    throw new Error("The AI couldn't understand that request. Please try rephrasing.");
  }
}

export async function generateMockup(
  config: MockupConfig,
  view: string
): Promise<string> {
  const garmentDescription = config.useAiApparel ? config.aiApparelPrompt : config.selectedGarment;
  const cleanDesignStyle = config.selectedDesignStyle.replace(/\[|\]/g, '');

  // --- 1. Technical Sketch ---
  if (config.selectedStyle === 'Technical Sketch Style') {
    const finalPrompt = TECHNICAL_SKETCH_PROMPT
      .replace('{{garment}}', garmentDescription)
      .replace('{{designStyle}}', cleanDesignStyle)
      .replace('{{view}}', view);
    
    try {
      const response = await ai.models.generateContent({
        model: 'gemini-2.5-flash-image',
        contents: { parts: [{ text: finalPrompt }] },
        config: { responseModalities: [Modality.IMAGE] },
      });
      const part = response.candidates?.[0]?.content?.parts?.[0];
      if (part?.inlineData) {
        return `data:image/png;base64,${part.inlineData.data}`;
      } else {
        console.error("Gemini API returned no image for sketch:", JSON.stringify(response, null, 2));
        throw new Error("No sketch was generated by the API.");
      }
    } catch (error: any) {
      console.error("Error generating technical sketch:", error);
      if (error.toString().includes('RESOURCE_EXHAUSTED') || (error.message && error.message.includes('429'))) {
          throw new Error("Request limit reached. Please wait a moment and try again.");
      }
      throw new Error("Failed to generate technical sketch. Please try again.");
    }
  }

  // --- 2. Photorealistic Mockup ---

  // --- 2a. With Custom Texture ---
  if (config.customMaterialTexture) {
    let finalPrompt: string;

    if (config.useAiModelScene) {
      finalPrompt = `
        Using the provided fabric texture image, create a high-end, photorealistic fashion photograph for an e-commerce campaign.
        - Garment: A ${garmentDescription}.
        - Model: ${config.aiModelPrompt}.
        - Scene: ${config.aiScenePrompt}.
        - View: Show the ${view} of the garment.
        - Color Overlay: The final garment should be tinted with the color ${config.selectedColor}.
        - Style: The design aesthetic is ${cleanDesignStyle}.
        - Final Image Rules: Do not add any text, logos, or watermarks. The focus should be on the apparel.
      `;
    } else {
      finalPrompt = `
        Using the provided fabric texture image, create a high-end, e-commerce style photorealistic mockup of a single garment.
        - Garment: A ${garmentDescription}.
        - View: Show the ${view} of the garment.
        - Color Overlay: The final garment should be tinted with the color ${config.selectedColor}.
        - Style: The design aesthetic is ${cleanDesignStyle}.
        - Presentation: The garment should be presented in a "ghost mannequin" or "flat lay" style.
        - Background: Use a neutral light gray studio background (#E0E0E0) with a subtle floor shadow.
        - Final Image Rules: The final image must be purely visual. It must NOT contain any text, labels, hangers, props, or human figures.
      `;
    }
    
    const textureImagePart = { 
      inlineData: { 
        mimeType: config.customMaterialTexture.substring(5, config.customMaterialTexture.indexOf(';')),
        data: dataUrlToBase64(config.customMaterialTexture) 
      } 
    };
    const textPart = { text: finalPrompt };

    try {
      const response = await ai.models.generateContent({
        model: 'gemini-2.5-flash-image',
        contents: { parts: [textureImagePart, textPart] },
        config: { responseModalities: [Modality.IMAGE] },
      });
      const part = response.candidates?.[0]?.content?.parts?.[0];
      if (part?.inlineData) {
        return `data:image/png;base64,${part.inlineData.data}`;
      } else {
        console.error("Gemini response did not contain image data:", JSON.stringify(response, null, 2));
        throw new Error("The AI failed to generate a mockup from the custom texture.");
      }
    } catch (error: any) {
      console.error("Error generating mockup with custom texture:", error);
       if (error.toString().includes('RESOURCE_EXHAUSTED') || (error.message && error.message.includes('429'))) {
          throw new Error("Request limit reached. Please wait a moment and try again.");
      }
      throw new Error("Failed to generate mockup with custom texture. Please try again.");
    }
  } else {
    // --- 2b. Without Custom Texture ---
    const basePrompt = config.useAiModelScene ? PHOTOREALISTIC_SCENE_PROMPT : PHOTOREALISTIC_APPAREL_PROMPT;
    const finalPrompt = basePrompt
      .replace('{{garment}}', garmentDescription)
      .replace('{{color}}', config.selectedColor)
      .replace('{{material}}', config.selectedMaterial)
      .replace('{{designStyle}}', cleanDesignStyle)
      .replace('{{view}}', view)
      .replace('{{model}}', config.aiModelPrompt)
      .replace('{{scene}}', config.aiScenePrompt);

    try {
      const response = await ai.models.generateContent({
        model: 'gemini-2.5-flash-image',
        contents: { parts: [{ text: finalPrompt }] },
        config: { responseModalities: [Modality.IMAGE] },
      });
      const part = response.candidates?.[0]?.content?.parts?.[0];
      if (part?.inlineData) {
        return `data:image/png;base64,${part.inlineData.data}`;
      } else {
        console.error("Gemini API returned no image for mockup:", JSON.stringify(response, null, 2));
        throw new Error("No image was generated by the API.");
      }
    } catch (error: any) {
      console.error("Error generating photorealistic mockup:", error);
      if (error.toString().includes('RESOURCE_EXHAUSTED') || (error.message && error.message.includes('429'))) {
          throw new Error("Request limit reached. Please wait a moment and try again.");
      }
      throw new Error("Failed to generate mockup. The AI may be experiencing issues.");
    }
  }
}

export async function generateAdditionalView(
  baseImage: string,
  config: MockupConfig,
  view: string
): Promise<string> {
  let promptTemplate: string;
  const model = 'gemini-2.5-flash-image';

  if (config.selectedStyle === 'Technical Sketch Style') {
    promptTemplate = ADDITIONAL_VIEW_SKETCH_PROMPT;
  } else {
    promptTemplate = ADDITIONAL_VIEW_PHOTO_PROMPT;
  }
  
  const finalPrompt = promptTemplate.replace('{{view}}', view);

  const referenceImagePart = { 
    inlineData: { 
      mimeType: 'image/png',
      data: dataUrlToBase64(baseImage) 
    } 
  };
  const textPart = { text: finalPrompt };

  try {
    const response = await ai.models.generateContent({
      model: model,
      contents: { parts: [referenceImagePart, textPart] },
      config: {
        responseModalities: [Modality.IMAGE],
      },
    });

    const part = response.candidates?.[0]?.content?.parts?.[0];
    if (part?.inlineData) {
      return `data:image/png;base64,${part.inlineData.data}`;
    } else {
      console.error(`Gemini API returned no image for additional view (${view}):`, JSON.stringify(response, null, 2));
      throw new Error(`The AI failed to generate the ${view} view.`);
    }
  } catch (error: any) {
    console.error(`Error generating additional view (${view}):`, error);
    if (error.toString().includes('RESOURCE_EXHAUSTED') || (error.message && error.message.includes('429'))) {
        throw new Error("Request limit reached. Please wait a moment and try again.");
    }
    throw new Error(`Failed to generate the ${view} view. Please try again.`);
  }
}


export async function generateGraphic(prompt: string, garment: string, targetArea: string, color: string): Promise<string> {
  const fullPrompt = `Create a high-resolution, professional graphic of "${prompt}".
  The graphic MUST have a transparent background.
  The primary color of the graphic should be ${color}. You can use complementary colors if needed, but the main color should be dominant.
  It should be in a vector or clean logo style, suitable for placing on a ${garment}.
  The shape and aspect ratio should be optimized to fit well on the ${targetArea} of the garment.
  Do not include the garment itself, only the graphic.`;

  try {
    const response = await ai.models.generateContent({
        model: 'gemini-2.5-flash-image',
        contents: { parts: [{ text: fullPrompt }] },
        config: { responseModalities: [Modality.IMAGE] },
    });

    const part = response.candidates?.[0]?.content?.parts?.[0];
    if (part?.inlineData) {
      return `data:image/png;base64,${part.inlineData.data}`;
    } else {
      console.error("Gemini API returned no image for graphic:", JSON.stringify(response, null, 2));
      throw new Error("No graphic was generated by the API.");
    }
  } catch (error: any) {
    console.error("Error calling Gemini API for graphic generation:", error);
    if (error.toString().includes('RESOURCE_EXHAUSTED') || (error.message && error.message.includes('429'))) {
        throw new Error("Request limit reached. Please wait a moment and try again.");
    }
    throw new Error("Failed to generate graphic. Please check the console for more details.");
  }
}

export async function generateInspirationPrompt(garment: string): Promise<string> {
  const prompt = `
    You are a creative director. Brainstorm a concise, visually interesting graphic design idea for a ${garment}.
    The idea should be suitable for a t-shirt graphic.
    The response should be short, punchy, and ready to be used as a generation prompt.
    For example, if the garment is a hoodie, you might suggest "minimalist line art of a mountain range" or "a retro-futuristic cassette tape".
    Respond with ONLY the idea text. Do not include conversational text like "Sure, here's an idea:".
  `;

  try {
    const response = await ai.models.generateContent({
      model: "gemini-2.5-flash",
      contents: prompt,
    });

    // Clean up quotes and trim whitespace
    const text = response.text.trim().replace(/^"|"$/g, '');
    if (!text) {
        throw new Error("The AI didn't return an idea. Try again.");
    }
    return text;
  } catch (error) {
    console.error("Error generating inspiration prompt:", error);
    throw new Error("Failed to get an idea from the AI. Please try again.");
  }
}

export async function modifyGarmentImage(baseImage: string, prompt: string): Promise<string> {
   const fullPrompt = `
    You are an expert fashion photo editor. The user has provided a base image of a garment and a modification request.
    Your task is to apply the requested modification to the garment in the image, maintaining photorealism.

    Modification Request: "${prompt}"

    CRITICAL INSTRUCTIONS:
    1.  Apply ONLY the requested change. Do not alter other parts of the garment or the background.
    2.  The final image must be a photorealistic version of the modified garment.
    3.  Maintain the original style, lighting, and texture of the base image.
    4.  The output must be only the modified image. Do not add any text or watermarks.
   `;

   try {
    const imagePart = { inlineData: { mimeType: 'image/png', data: dataUrlToBase64(baseImage) } };
    const textPart = { text: fullPrompt };

    const response = await ai.models.generateContent({
      model: 'gemini-2.5-flash-image',
      contents: { parts: [imagePart, textPart] },
      config: {
        responseModalities: [Modality.IMAGE],
      },
    });

    const part = response.candidates?.[0]?.content?.parts?.[0];
    if (part?.inlineData) {
      return `data:image/png;base64,${part.inlineData.data}`;
    } else {
      console.error("Gemini API returned no image for modification:", JSON.stringify(response, null, 2));
      throw new Error("The AI failed to modify the garment.");
    }
   } catch (error: any) {
    console.error("Error calling Gemini API for garment modification:", error);
    if (error.toString().includes('RESOURCE_EXHAUSTED') || (error.message && error.message.includes('429'))) {
        throw new Error("Request limit reached. Please wait a moment and try again.");
    }
    throw new Error("Failed to modify garment. Please check the console for more details.");
   }
}


export async function renderRealisticComposite(baseImage: string, compositeGraphic: string): Promise<string> {
   const prompt = `
    Analyze the provided base apparel image and the separate composite graphic image.
    Your task is to create a new, hyper-realistic composite image by fusing the graphic onto the apparel.

    CRITICAL INSTRUCTIONS:
    1.  **Smart Displacement Mapping:** The graphic must be perfectly integrated into the apparel. It must follow and distort according to the fabric's natural folds, creases, wrinkles, and texture. It should not look like a flat sticker.
    2.  **Realistic Lighting:** Analyze the lighting and shadows of the base image (direction, softness, intensity) and accurately apply them to the graphic. The graphic must look like it exists in the same environment as the garment.
    3.  **Maintain Integrity:** Do not change the apparel, the graphic's core design, or the background. The final output must be a single, photorealistic image of the printed garment.
   `;

   try {
    const baseImagePart = { inlineData: { mimeType: 'image/png', data: dataUrlToBase64(baseImage) } };
    const graphicPart = { inlineData: { mimeType: 'image/png', data: dataUrlToBase64(compositeGraphic) } };
    const textPart = { text: prompt };

    const response = await ai.models.generateContent({
      model: 'gemini-2.5-flash-image',
      contents: { parts: [textPart, baseImagePart, graphicPart] },
      config: {
        responseModalities: [Modality.IMAGE],
      },
    });

    const part = response.candidates?.[0]?.content?.parts?.[0];
    if (part?.inlineData) {
      const base64ImageBytes: string = part.inlineData.data;
      return `data:image/png;base64,${base64ImageBytes}`;
    } else {
      throw new Error("The AI failed to render the realistic composite image.");
    }
   } catch (error: any) {
    console.error("Error calling Gemini API for realistic rendering:", error);
    if (error.toString().includes('RESOURCE_EXHAUSTED') || (error.message && error.message.includes('429'))) {
        throw new Error("Request limit reached. Please wait a moment and try again.");
    }
    throw new Error("Failed to render realistic mockup. Please check the console for more details.");
   }
}
