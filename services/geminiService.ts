import { GoogleGenAI, Modality, Type } from "@google/genai";
import { 
    GARMENT_CATEGORIES, 
    StyleOption, 
    PHOTOREALISTIC_APPAREL_PROMPT,
    PHOTOREALISTIC_SCENE_PROMPT,
    TECHNICAL_SKETCH_PROMPT,
    EASY_PROMPT_PARSER,
    MockupConfig
} from '../constants';

const API_KEY = process.env.API_KEY;

if (!API_KEY) {
  throw new Error("API_KEY environment variable not set");
}

const ai = new GoogleGenAI({ apiKey: API_KEY });

// Helper to convert data URL to base64 string
function dataUrlToBase64(dataUrl: string): string {
  const regex = /^data:image\/(png|jpeg|gif|webp);base64,/;
  return dataUrl.replace(regex, '');
}

export async function parseEasyPrompt(prompt: string): Promise<Partial<MockupConfig>> {
  try {
    const response = await ai.models.generateContent({
      model: "gemini-2.5-flash",
      contents: EASY_PROMPT_PARSER.replace('{{prompt}}', prompt),
      config: {
        responseMimeType: "application/json",
        responseSchema: {
          type: Type.OBJECT,
          properties: {
            selectedGarment: { type: Type.STRING },
            selectedDesignStyle: { type: Type.STRING },
            selectedColor: { type: Type.STRING },
            selectedMaterial: { type: Type.STRING },
            selectedStyle: { type: Type.STRING },
          }
        },
      },
    });

    const jsonString = response.text.trim();
    return JSON.parse(jsonString) as Partial<MockupConfig>;
  } catch (error) {
    console.error("Error parsing easy prompt:", error);
    throw new Error("The AI couldn't understand that request. Please try rephrasing.");
  }
}

export async function generateMockup(
  config: MockupConfig,
  view: string
): Promise<string> {
  let finalPrompt: string;
  
  const garmentDescription = config.useAiApparel ? config.aiApparelPrompt : config.selectedGarment;

  if (config.selectedStyle === 'Technical Sketch Style') {
     // Use the dedicated, unambiguous prompt for technical sketches
     finalPrompt = TECHNICAL_SKETCH_PROMPT
      .replace('{{garment}}', garmentDescription)
      .replace('{{color}}', config.selectedColor)
      .replace('{{designStyle}}', config.selectedDesignStyle)
      .replace('{{view}}', view);
  } else {
    // Use the photorealistic prompts for all other cases
    let basePrompt = config.useAiModelScene ? PHOTOREALISTIC_SCENE_PROMPT : PHOTOREALISTIC_APPAREL_PROMPT;
  
    finalPrompt = basePrompt
      .replace('{{garment}}', garmentDescription)
      .replace('{{color}}', config.selectedColor)
      .replace('{{material}}', config.selectedMaterial)
      .replace('{{designStyle}}', config.selectedDesignStyle)
      .replace('{{view}}', view)
      .replace('{{model}}', config.aiModelPrompt)
      .replace('{{scene}}', config.aiScenePrompt);
  }

  try {
    const response = await ai.models.generateImages({
      model: 'imagen-4.0-generate-001',
      prompt: finalPrompt,
      config: {
        numberOfImages: 1,
        outputMimeType: 'image/png',
        aspectRatio: '1:1', // Aspect ratio control is simplified in this new model
      },
    });

    if (response.generatedImages && response.generatedImages.length > 0 && response.generatedImages[0].image.imageBytes) {
      const base64ImageBytes = response.generatedImages[0].image.imageBytes;
      return `data:image/png;base64,${base64ImageBytes}`;
    } else {
      throw new Error("No image was generated by the API.");
    }
  } catch (error) {
    console.error("Error calling Gemini API for mockup generation:", error);
    throw new Error("Failed to generate mockup. The AI may be experiencing issues. Please try again later.");
  }
}

export async function generateGraphic(prompt: string, garment: string, targetArea: string): Promise<string> {
  const fullPrompt = `Create a high-resolution, professional graphic of "${prompt}". 
  The graphic MUST have a transparent background. 
  It should be in a vector or clean logo style, suitable for placing on a ${garment}.
  The shape and aspect ratio should be optimized to fit well on the ${targetArea} of the garment.
  Do not include the garment itself, only the graphic.`;

  try {
    const response = await ai.models.generateImages({
      model: 'imagen-4.0-generate-001',
      prompt: fullPrompt,
      config: {
        numberOfImages: 1,
        outputMimeType: 'image/png',
        aspectRatio: '1:1',
      },
    });

    if (response.generatedImages && response.generatedImages.length > 0 && response.generatedImages[0].image.imageBytes) {
      const base64ImageBytes = response.generatedImages[0].image.imageBytes;
      return `data:image/png;base64,${base64ImageBytes}`;
    } else {
      throw new Error("No graphic was generated by the API.");
    }
  } catch (error) {
    console.error("Error calling Gemini API for graphic generation:", error);
    throw new Error("Failed to generate graphic. Please check the console for more details.");
  }
}

export async function renderRealisticComposite(baseImage: string, compositeGraphic: string): Promise<string> {
   const prompt = `
    Analyze the provided base apparel image and the separate composite graphic image.
    Your task is to create a new, hyper-realistic composite image by fusing the graphic onto the apparel.

    CRITICAL INSTRUCTIONS:
    1.  **Smart Displacement Mapping:** The graphic must be perfectly integrated into the apparel. It must follow and distort according to the fabric's natural folds, creases, wrinkles, and texture. It should not look like a flat sticker.
    2.  **Realistic Lighting:** Analyze the lighting and shadows of the base image (direction, softness, intensity) and accurately apply them to the graphic. The graphic must look like it exists in the same environment as the garment.
    3.  **Maintain Integrity:** Do not change the apparel, the graphic's core design, or the background. The final output must be a single, photorealistic image of the printed garment.
   `;

   try {
    const baseImagePart = { inlineData: { mimeType: 'image/png', data: dataUrlToBase64(baseImage) } };
    const graphicPart = { inlineData: { mimeType: 'image/png', data: dataUrlToBase64(compositeGraphic) } };
    const textPart = { text: prompt };

    const response = await ai.models.generateContent({
      model: 'gemini-2.5-flash-image',
      contents: { parts: [textPart, baseImagePart, graphicPart] },
      config: {
        responseModalities: [Modality.IMAGE],
      },
    });

    const part = response.candidates?.[0]?.content?.parts?.[0];
    if (part?.inlineData) {
      const base64ImageBytes: string = part.inlineData.data;
      return `data:image/png;base64,${base64ImageBytes}`;
    } else {
      throw new Error("The AI failed to render the realistic composite image.");
    }
   } catch (error) {
    console.error("Error calling Gemini API for realistic rendering:", error);
    throw new Error("Failed to render realistic mockup. Please check the console for more details.");
   }
}