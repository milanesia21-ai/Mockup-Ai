import { GoogleGenAI, Modality } from "@google/genai";
import { BASE_PROMPT, StyleOption, AspectRatioOption } from '../constants';

const API_KEY = process.env.API_KEY;

if (!API_KEY) {
  throw new Error("API_KEY environment variable not set");
}

const ai = new GoogleGenAI({ apiKey: API_KEY });

// Helper to convert data URL to base64 string
function dataUrlToBase64(dataUrl: string): string {
  const regex = /^data:image\/(png|jpeg|gif|webp);base64,/;
  return dataUrl.replace(regex, '');
}

export async function generateMockup(
  garment: string,
  style: StyleOption,
  aspectRatio: AspectRatioOption,
  designStyle: string
): Promise<string> {
  const styleDescription = style === 'Technical Sketch Style'
    ? 'OPTION A - Technical Sketch Style (Fashion Tech Pack)'
    : 'OPTION B - Photorealistic Mockup';

  const fullPrompt = `
Create a professional vector mockup of men's apparel with the following comprehensive specifications:

=== USER SELECTION ===
GARMENT: ${garment}
STYLE: ${styleDescription}
DESIGN STYLE: ${designStyle}

${BASE_PROMPT}
`;

  try {
    const response = await ai.models.generateImages({
      model: 'imagen-4.0-generate-001',
      prompt: fullPrompt,
      config: {
        numberOfImages: 1,
        outputMimeType: 'image/png',
        aspectRatio: aspectRatio,
      },
    });

    if (response.generatedImages && response.generatedImages.length > 0 && response.generatedImages[0].image.imageBytes) {
      const base64ImageBytes = response.generatedImages[0].image.imageBytes;
      return `data:image/png;base64,${base64ImageBytes}`;
    } else {
      throw new Error("No image was generated by the API.");
    }
  } catch (error) {
    console.error("Error calling Gemini API for mockup generation:", error);
    throw new Error("Failed to generate mockup. Please check the console for more details.");
  }
}

export async function generateGraphic(prompt: string, garment: string): Promise<string> {
  const fullPrompt = `Create a high-resolution, professional graphic of "${prompt}". The graphic MUST have a transparent background. It should be in a vector or clean logo style, suitable for placing on a ${garment}. Do not include the garment itself, only the graphic.`;

  try {
    const response = await ai.models.generateImages({
      model: 'imagen-4.0-generate-001',
      prompt: fullPrompt,
      config: {
        numberOfImages: 1,
        outputMimeType: 'image/png',
        aspectRatio: '1:1', // Graphics are typically square
      },
    });

    if (response.generatedImages && response.generatedImages.length > 0 && response.generatedImages[0].image.imageBytes) {
      const base64ImageBytes = response.generatedImages[0].image.imageBytes;
      return `data:image/png;base64,${base64ImageBytes}`;
    } else {
      throw new Error("No graphic was generated by the API.");
    }
  } catch (error) {
    console.error("Error calling Gemini API for graphic generation:", error);
    throw new Error("Failed to generate graphic. Please check the console for more details.");
  }
}

export async function editImage(baseImage: string, prompt: string): Promise<string> {
   try {
    const imagePart = {
      inlineData: {
        mimeType: 'image/png',
        data: dataUrlToBase64(baseImage),
      },
    };
    const textPart = { text: prompt };

    const response = await ai.models.generateContent({
      model: 'gemini-2.5-flash-image',
      contents: { parts: [imagePart, textPart] },
      config: {
        responseModalities: [Modality.IMAGE],
      },
    });

    const part = response.candidates?.[0]?.content?.parts?.[0];
    if (part?.inlineData) {
      const base64ImageBytes: string = part.inlineData.data;
      return `data:image/png;base64,${base64ImageBytes}`;
    } else {
      throw new Error("No edited image was returned from the API.");
    }
   } catch (error) {
    console.error("Error calling Gemini API for image editing:", error);
    throw new Error("Failed to edit image. Please check the console for more details.");
   }
}
